FF %>% filter(Uploaded_variation %in% tmp[8])
tmp2<-c("chr7_128938247_T/G","chr21_42434957_A/C","chr9_136364897_A/G","chr12_6330843_T/C","chr15_77028829_A/G","chr1_17348042_C/A","chr20_1635560_A/G")
FF %>% filter(Uploaded_variation %in% tmp2[1])
FF %>% filter(Uploaded_variation %in% tmp2[2])
FF %>% filter(Uploaded_variation %in% tmp2[3])
FF %>% filter(Uploaded_variation %in% tmp2[4])
FF %>% filter(Uploaded_variation %in% tmp2[5])
FF %>% filter(Uploaded_variation %in% tmp2[6])
FF %>% filter(Uploaded_variation %in% tmp2[7])
FF %>% filter(SYMBOL %in% c("PSTPIP1"))
head(DF)
DF %>% filter(MAPPED_GENE=="UBASH3A")
DF %>% filter(MAPPED_GENE=="UBASH3A") %>% filter(LD_SNP_hg38=="chr21_42434957_A_C")
DF %>% filter(MAPPED_GENE=="UBASH3A") %>% filter(LD_SNP_hg38=="chr21_42434957_A_C") %>% filter(MAPPED_TRAIT=="rheumatoid_arthritis")
DF %>% filter(MAPPED_GENE=="PSTPIP1")
DF %>% filter(MAPPED_GENE=="PSTPIP1") %>% filter(MA)
DF %>% filter(MAPPED_GENE=="PSTPIP1") %>% filter(MAPPED_TRAIT=="rheumatoid_arthritis ")
DF %>% filter(MAPPED_GENE=="PSTPIP1") %>% filter(MAPPED_TRAIT=="rheumatoid_arthritis")
DF %>% filter(MAPPED_GENE=="PSTPIP1")
DF<-read.table("/Users/hhat/Documents/share/riken/meeting_document/20240930toKono_uptodate/R11_fin20241017/result/R11_metaanalysis_result.txt",header=T)
head(DF)
library(tidyverse)
head(DF)
DF %>% filter(effect=="toALT_edit_nonlinear")
DF
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
install.packages(lmerTest)
BiocManager::install(lmerTest)
BiocManager::install("lmerTest")
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
data<-read.table("input_file.txt",header=T,sep="\t")
data<-read.table("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo/input_file.txt",header=T,sep="\t")
head(data)
dim(data)
snp <- "rs35320439"
results_random_slope<-data.frame()
result_DF<-read.table("input_file.txt",header=T,sep="\t")
snp <- "rs35320439"
results_random_slope<-data.frame()
result_DF<-read.table("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo/input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
result_DF<-read.table("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo/input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
set.seed(123)
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
set.seed(12443)
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=10)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP) %>% arrange(rsID)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model <- summary(model_random_slope)
fixed_effects <- sum_model$coefficients
random_effects_sd <- as.data.frame(VarCorr(model_random_slope))
results_random_slope <- rbind(results_random_slope,
data.frame(
rsID = snp,
effect = c("Intercept", "toALT_edit_linear"),
Estimate = fixed_effects[,"Estimate"],
Odds_Ratio = exp(fixed_effects[,"Estimate"]),
CI_Lower = exp(fixed_effects[,"Estimate"] - 1.96 * fixed_effects[,"Std. Error"]),
CI_Upper = exp(fixed_effects[,"Estimate"] + 1.96 * fixed_effects[,"Std. Error"]),
Std_Error = fixed_effects[,"Std. Error"],
z_value = fixed_effects[,"z value"],
p_value = fixed_effects[,"Pr(>|z|)"],
Random_Effect_SD = c(random_effects_sd$sdcor[1], random_effects_sd$sdcor[2])  # ランダム効果の標準偏差
)
)
results_random_slope
set.seed(123)
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model1 <- summary(model_random_slope)
sum_model1
set.seed(456)
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model2 <- summary(model_random_slope)
sum_model2
sum_model1$coefficients
sum_model2$coefficients
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model1 <- summary(model_random_slope)
sum_model1
summary(model_random_slope)
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model1 <- summary(model_random_slope)
sum_model1
# Load required libraries
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
})
logit <- function(p) log(p/(1-p))
snp <- "rs35320439"
results_random_slope<-data.frame()
setwd("~/UNIChro-seq-Analysis/crisper_analysis/bidirectional_edit_demo")
result_DF<-read.table("input_file.txt",header=T,sep="\t")
result_DF<- result_DF %>% mutate(ALT_dna_prob = round(ALT_count / (REF_count + ALT_count),digit=15)) %>% rename(sample_base=Donor) %>% rename(rsID=SNP)
snp_data <- result_DF %>% subset(rsID == snp)
replicate_results_intercept <- list()
replicate_results_toALT_edit_linear <- list()
long_DF <- snp_data %>%
select(rsID, sample_base, ALT_dna_prob, ref, alt, edit_direction) %>%
pivot_longer(cols = c(ref, alt),
names_to = "refalt",
values_to = "count") %>%
mutate(refalt = ifelse(refalt == "alt", 1, 0)) %>%
uncount(count) %>%
mutate(
toALT_edit_linear = case_when(
edit_direction == "REF_to_ALT" ~ 1,
edit_direction == "NON_EDIT" ~ 0,
edit_direction == "ALT_to_REF" ~ -1
)
)
options(digits = 15)
# GLMM
model_random_slope <- glmer(refalt ~ offset(logit(ALT_dna_prob)) + toALT_edit_linear +
(1 + toALT_edit_linear | sample_base),
family = binomial, data = long_DF)
sum_model1 <- summary(model_random_slope)
sum_model1
sum_model1
sum_model$coefficients
essionInfo()
sessionInfo()
packageVersion("lme4")
packageVersion("Matrix")
R.version
